3.用私有化构造器或者枚举类强化Singleton属性
缺少公有的或者受保护的构造器，所以保证了Elvis的全局唯一性。
4.通过私有化构造器强化不可实例化的能力。
5.避免创建不必要的对象
//每次调用都会new一个对象
String s = new String("stringette");//don't do this.
//改进后
String s = "stringette";

6.消除过期的对象引用
2018-05-17

2018-10-16
目标：一年内月薪突破20K，2019年12月31日前买一套商品房。

12.考虑实现Comparable接口
1.传递性，比较返回 0 ，整数，负数。
2.通常可以保持 equals() 一致，也可根据实际类，compareTo相等但并不equals.
BigDecimal(1.00) BigDecimal(1.0)

第四章 类和接口
13.使类和成员的可访问性最小化
14.在共有类中使用访问方法而非公有域
22.优先考虑静态成员类
第五章 泛型
23.请不要再新代码中使用原生态类型
泛型，安全机制，把运行时的异常提前到了编译时检查。
无限制通配符 List<?>
if (o instanceof Set) {
    Set<?> m = (Set<?>)o;
}
24.消除非受检警告
禁止非受检告警，范围设到最小。
使用SuppressWarnings("unchecked")注解时，都要添加一条注释，说明为什么这样做是安全的。
25.列表优先于数组
//fails at runtime
Object[] objectArray = new Long[1];
objectArray[0] = "not fit";

//won't compile
List<Object> o1 = new ArrayList<Long>();
o1.add("not fit");

26.优先考虑泛型
27.优先考虑泛型方法
28.利用有限制通配符来提升API的灵活性
通配符类型
producer-extends,consumer-super(PECS),所有的comparable和comparator都是消费者
29.优先考虑类型安全的异构容器
第六章
枚举和注解
30.用enum来代替int常量
31.用实例域代替序数
32.用EnumSet代替位域
33.用EnumMap代替序数索引
35.注解优先于命名模式
36.坚持使用Override注解
37.用标记接口定义类型







































